function net = setupNet(details)
    net = initializeCNN(details.numClass);
end

function net = initializeCNN(numClass)
    f=1/100 ;
    net.layers = {} ;
    % CONV1
    net.layers{end+1} = struct('type', 'conv', 'name', 'CONV1',...
                               'filters', f*randn(1,49,1,96, 'single'), ...
                               'biases', zeros(1, 96, 'single'), ...
                               'stride', 1, ...
                               'filtersLearningRate', 4, ...
                               'pad', 0);

    net.layers{end+1} = struct('type', 'relu', 'name', 'RELU1');


    %RNORM1
    net.layers{end+1} = struct('type', 'normalize', 'name', 'RNORM1', ...
                               'param', [5 1 0.0001/5 0.75]);

    % POOLING 1
    net.layers{end+1} = struct('type', 'pool', 'name', 'MAXPOOL1', ...
                               'method', 'max', ...
                               'pool', [1 2], ...
                               'stride', 2, ...
                               'pad', 0);

    % CONV2_1
    net.layers{end+1} = struct('type', 'conv', 'name', 'CONV2.1',...
                               'filters', f*randn(1,25,96,128, 'single'), ...
                               'biases', zeros(1, 128, 'single'), ...
                               'stride', 1, ...
                               'filtersLearningRate', 4, ...
                               'pad', 0);

    net.layers{end+1} = struct('type', 'relu', 'name', 'RELU21');

    %RNORM1
    net.layers{end+1} = struct('type', 'normalize', 'name', 'RNORM1', ...
                               'param', [5 1 0.0001/5 0.75]);

    % POOLING 2
    net.layers{end+1} = struct('type', 'pool', 'name', 'MAXPOOL2', ...
                               'method', 'max', ...
                               'pool', [1 2], ...
                               'stride', 2, ...
                               'pad', 0);

    % CONV3_1
    net.layers{end+1} = struct('type', 'conv', 'name', 'CONV3.1',...
                               'filters', f*randn(1,9,128,256, 'single'), ...
                               'biases', zeros(1, 256, 'single'), ...
                               'stride', 1, ...
                               'filtersLearningRate', 4, ...
                               'pad', 0);

    net.layers{end+1} = struct('type', 'relu', 'name', 'RELU21');

    %RNORM1
    net.layers{end+1} = struct('type', 'normalize', 'name', 'RNORM1', ...
                               'param', [5 1 0.0001/5 0.75]);

    % POOLING 2
    net.layers{end+1} = struct('type', 'pool', 'name', 'MAXPOOL2', ...
                               'method', 'max', ...
                               'pool', [1 2], ...
                               'stride', 2, ...
                               'pad', 0);

    % CONV4_1
    net.layers{end+1} = struct('type', 'conv', 'name', 'CONV4.1',...
                               'filters', f*randn(1,9,256,512, 'single'), ...
                               'biases', zeros(1, 512, 'single'), ...
                               'stride', 1, ...
                               'filtersLearningRate', 4, ...
                               'pad', 0);

    net.layers{end+1} = struct('type', 'relu', 'name', 'RELU21');

    %RNORM1
    net.layers{end+1} = struct('type', 'normalize', 'name', 'RNORM1', ...
                               'param', [5 1 0.0001/5 0.75]);

    % POOLING 2
    net.layers{end+1} = struct('type', 'pool', 'name', 'MAXPOOL2', ...
                               'method', 'max', ...
                               'pool', [1 2], ...
                               'stride', 2, ...
                               'pad', 0);

    % FC5
    net.layers{end+1} = struct('type', 'conv', 'name', 'FC5',...
                               'filters', f*randn(1,6,512,4096, 'single'), ...
                               'biases', zeros(1, 4096, 'single'), ...
                               'stride', 1, ...
                               'filtersLearningRate', 4, ...
                               'pad', 0);

    net.layers{end+1} = struct('type', 'relu', 'name', 'RELUFC1');

    net.layers{end+1} = struct('type', 'conv', 'name', 'FC1.2',...
                               'filters', f*randn(1,1,4096,4096, 'single'), ...
                               'biases', zeros(1, 4096, 'single'), ...
                               'stride', 1, ...
                               'pad', 0) ;

    net.layers{end+1} = struct('type', 'relu', 'name', 'RELUFC1.2');

    %net.layers{end+1} = struct('type', 'dropout','name', 'DROP12','rate', 0.5) ;

    %RNORM1
    net.layers{end+1} = struct('type', 'normalize', 'name', 'RNORM1', ...
                               'param', [5 1 0.0001/5 0.75]);

    % FC2
    net.layers{end+1} = struct('type', 'conv', 'name', 'FC2',...
                               'filters', f*randn(1,1,4096,numClass, 'single'), ...
                               'biases', zeros(1, numClass, 'single'), ...
                               'stride', 1, ...
                               'filtersLearningRate', 4, ...
                               'pad', 0);

    %net.layers{end+1} = struct('type', 'relu', 'name', 'FC2');

    % Dropout de 50%
    net.layers{end+1} = struct('type', 'dropout','name', 'DROP12','rate', 0.1);

    % softmax
    net.layers{end+1} = struct('type', 'softmaxloss');
end
